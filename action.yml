name: 'Setup Conan Client'
description: 'A GitHub Action to install and configure the Conan client'
author: 'Conan.io <conan@jfrog.com>'

inputs:
  version:
    description: 'Version of Conan 2.x to install'
    required: false
    default: ''
  config_urls:
    description: 'URLs or paths to a Conan configuration repository to be installed. Use new lines to separate multiple URLs.'
    required: false
    default: ''
  audit_token:
    description: 'Conan audit token to be used for authentication'
    required: false
    default: ''
  home:
    description: 'Custom path for Conan cache directory'
    required: false
    default: ''
  cache_packages:
    description: 'Cache all Conan packages from the cache'
    required: false
    default: 'false'

outputs:
  conan-version:
    description: "Conan version"
    value: ${{ steps.install-conan.outputs.conan-version }}
  conan-home:
    description: "Conan cache directory"
    value: ${{ steps.get-conan-home.outputs.conan-home }}

runs:
  using: 'composite'
  steps:
    - name: Check Conan version to be installed
      shell: bash
      id: check-conan-version
      run: |
        conan_version=2.16.1
        if [ -n "${{ inputs.version }}" ]; then
          conan_version="${{ inputs.version }}"
          if [[ "$conan_version" == 1.* ]]; then
            echo "ERROR: Conan 1.x is not supported. Please use Conan 2.x"
            exit 1
          fi
        fi
        echo "conan-version=$conan_version" >> $GITHUB_OUTPUT

    - name: Set CONAN_HOME
      if: ${{ inputs.home != '' }}
      id: export-conan-home
      shell: bash
      run: |
        echo "CONAN_HOME=${{ inputs.home }}" >> $GITHUB_ENV

    - name: Install self-contained Conan on Windows
      shell: bash
      id: install-self-contained-conan-windows
      if: runner.os == 'Windows'
      run: |
        conan_version=${{ steps.check-conan-version.outputs.conan-version }}
        export INSTALL_DIR="$HOME/.local/bin"
        mkdir -p "$INSTALL_DIR"
        curl -sSL -o $RUNNER_TEMP/conan.zip https://github.com/conan-io/conan/releases/download/${conan_version}/conan-${conan_version}-windows-x86_64.zip
        unzip -q "$RUNNER_TEMP/conan.zip" -d "$INSTALL_DIR"

    - name: Install self-contained Conan on Linux
      shell: bash
      id: install-self-contained-conan-linux
      if: runner.os == 'Linux'
      run: |
        conan_version=${{ steps.check-conan-version.outputs.conan-version }}
        export INSTALL_DIR="$HOME/.local"
        mkdir -p "$INSTALL_DIR"
        wget -q -O $RUNNER_TEMP/conan.tgz https://github.com/conan-io/conan/releases/download/${conan_version}/conan-${conan_version}-linux-x86_64.tgz
        tar -xzf "$RUNNER_TEMP/conan.tgz" -C "$INSTALL_DIR"

    - name: Install self-contained Conan on MacOS
      shell: bash
      id: install-self-contained-conan-macos
      if: runner.os == 'macOS'
      run: |
        conan_version=${{ steps.check-conan-version.outputs.conan-version }}
        export INSTALL_DIR="$HOME/.local"
        mkdir -p "$INSTALL_DIR"
        wget -q -O $RUNNER_TEMP/conan.tgz https://github.com/conan-io/conan/releases/download/${conan_version}/conan-${conan_version}-macos-arm64.tgz
        tar -xzf "$RUNNER_TEMP/conan.tgz" -C "$INSTALL_DIR"

    - name: Detect Conan profile
      shell: bash
      id: detect-conan-profile
      run: |
        conan profile detect || true

    - name: Get Conan cache folder path
      shell: bash
      id: get-conan-home
      run: echo "conan-home=$(conan config home)" >> $GITHUB_OUTPUT

    - name: 'Configure Conan'
      if: ${{ inputs.config_urls != '' }}
      id: configure-conan
      shell: bash
      run: |
        echo "${{ inputs.config_urls }}" | while read -r url; do
        if [ ! -z "$url" ]; then
          conan config install "$url"
        fi
        done

    - name: 'Authenticate Audit'
      if: ${{ inputs.audit_token != '' }}
      id: conan-audit-authentication
      shell: bash
      run: |
        conan audit provider auth conancenter --token=${{ inputs.audit_token }}

    - name: Cache Conan packages
      if: ${{ inputs.cache_packages == 'true' }}
      uses: actions/cache@v4.2.3
      id: cache-conan-packages
      with:
        path: ${{ steps.get-conan-home.outputs.conan-home }}/p
        key: conan-${{ steps.install-conan.outputs.conan-version }}-${{ runner.os }}
        restore-keys: |
          conan-${{ steps.install-conan.outputs.conan-version }}-${{ runner.os }}-

branding:
  icon: 'package'
  color: 'blue'
